#title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Config
#+begin_src emacs-lisp
  (setq cstm/project-dirs '("~/Documents/Web" "~/Documents/Other"))

  ;; doom- moonlight snazzy sourcerer material nord-aurora nova old-home opera vibrant misterioso horizon
  (setq cstm/theme 'doom-one)

  (setq cstm/font-face "Menlo")
  (setq cstm/font-size 95)

  (setq cstm/org-column-width 150)
#+end_src
* OnStartup 
#+begin_src emacs-lisp
  ;; Increase memory size to 75MB to decrease startup time
  (setq gc-cons-threshold (* 75 1024 1024))
#+end_src
* Different settings
** Initial theme
Setting theme to dark, until package with other themes loads no to get blind.
#+begin_src emacs-lisp
  (load-theme 'wombat)
#+end_src
** Default mode
By default open files as plain text
#+begin_src emacs-lisp
  (setq initial-major-mode 'text-mode)
#+end_src
** Coding System
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src
** Tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq-default default-tab-width 4)
#+end_src
** Etc
#+begin_src emacs-lisp
  ;; Disable shitty bell
  (setq ring-bell-function 'ignore)
#+end_src
** Fix Warnings
#+begin_src emacs-lisp
  (when (eq system-type 'darwin) (customize-set-variable 'native-comp-driver-options '("-Wl,-w")))
  (setq byte-compile-warnings '(cl-functions))
#+end_src
** Use C-c C-v C-x
#+begin_src emacs-lisp
  (cua-mode t)
#+end_src
* Package System
** Use Package
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/") 
                           ("org" . "https://orgmode.org/elpa/") 
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))

  ;; Initilize use-package on non-Linux
  (unless (package-installed-p 'use-package) (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src
** Automatic Package Packages
#+begin_src emacs-lisp
  (use-package auto-package-update
      :custom
      (auto-package-update-interval 7)
      (auto-package-update-prompt-before-update nil)
      (auto-package-update-hide-results t)
      :config
      (auto-package-update-maybe)
      (auto-package-update-at-time "19:30"))
#+end_src
** Hide Minor Modes
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src
* Keep Folders Clean
.emacs.d
#+begin_src emacs-lisp
  (use-package no-littering)
#+end_src
file~
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/emacs-backups")))
#+end_src
#file#
#+begin_src emacs-lisp
  (setq auto-save-default nil)
#+end_src
.#file
#+begin_src emacs-lisp
  (setq-default create-lockfiles nil)
#+end_src
* Keybinding
** EVIL
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state) 
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

  (use-package evil-nerd-commenter :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** General (better keybinding definitions)
#+begin_src emacs-lisp
  (use-package general :after evil)
#+end_src
** Custom Keybindings
#+begin_src emacs-lisp
  (general-create-definer cstm/keybinds
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (defun open-file (filename) (find-file (expand-file-name filename)))

  (cstm/keybinds
   "o"   '(:ignore t :which-key "open")
   "od"  '(dired :which-key "dired")
   "om"  '(magit-status :which-key "magit")
   "of"  '(counsel-find-file :which-key "file")
   "oe"  '(:ignore t :which-key "emacs config")
   "oeo" '((lambda () (interactive) (open-file "~/.emacs.d/Emacs.org")) :which-key "org")
   "oee" '((lambda () (interactive) (open-file "~/.emacs.d/init.el")) :which-key "elisp")
   "a"   '(:ignore t :which-key "actions")
   "at"  '(counsel-load-theme :which-key "change theme")
   "ap"  '(counsel-projectile-switch-project :which-key "switch project")
   "aq"  '(:ignore t :which-key "quit")
   "aqq" '(evil-quit-all :which-key "quit emacs")
   "h"   '(:ignore t :which-key "help")
   "hf"  '(counsel-describe-function :which-key "function")
   "hc"  '(helpful-command :which-key "command")
   "hv"  '(counsel-describe-variable :which-key "variable")
   "hk"  '(helpful-key :which-key "key"))

#+end_src
* User Interface
** Maximize Window
#+begin_src emacs-lisp
  (custom-set-variables '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+end_src
** Startup Page
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+end_src
** View Settings
#+begin_src emacs-lisp
  (scroll-bar-mode -1) ;; Disable scrollbar
  (tool-bar-mode   -1) ;; Disable toolbar
  (tooltip-mode    -1) ;; Disable tooltip
  (menu-bar-mode   -1) ;; Diasble menubar

  ;; Padding
  (set-fringe-mode 8) 
  (custom-set-faces `(fringe ((t (:background nil)))))
#+end_src
** Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font cstm/font-face :height cstm/font-size)
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package doom-themes :init (load-theme cstm/theme t))
#+end_src
** Status bar / Mode line
#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 5)))
#+end_src
** Icons
*When using for the first time /on the system/ fonts have to be installed with:* ~all-the-icons-install-fonts~
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** Counsel (better menus)
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file))
    :config 
    (setq ivy-initial-inputs-alist nil)
    (global-set-key (kbd "C-M-j") 'counsel-switch-buffer))
#+end_src
** Ivy (completion mechanism)
#+begin_src emacs-lisp
  (use-package ivy-rich :init (ivy-rich-mode 1))
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line))
    :config (ivy-mode 1))
#+end_src
** Dired (file management)
#+begin_src emacs-lisp
    (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      :bind (("C-x C-j" . dired-jump))
      :custom
      (dired-listing-switches "-alh --group-directories-first")
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
        "h" 'dired-single-up-directory
        "l" 'dired-single-buffer))

    (use-package dired-single 
      :commands (dired dired-jump))
#+end_src
Icons in dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired 
    :commands (dired dired-jump)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
* Org Mode
** Org Config
#+begin_src emacs-lisp
  (defun cstm/org-mode ()
      (org-indent-mode)
      (visual-line-mode 1))

  (use-package org
      :pin org
      :commands (org-capture)
      :hook (org-mode . cstm/org-mode)
      :config 
      (setq org-hide-emphasis-markers t
            org-confirm-babel-evaluate nil)
      (dolist (face '(
          (org-level-1 . 1.2)
          (org-level-2 . 1.15)
          (org-level-3 . 1.1)
          (org-level-4 . 1.05)
          (org-level-5 . 1.025)
          (org-level-6 . 1.0)
          (org-level-7 . 1.0)
          (org-level-8 . 1.0)))
          (set-face-attribute (car face) nil :font cstm/font-face :weight 'regular :height (cdr face)))
      (dolist (template '(
          ("sh" . "src shell")
          ("el" . "src emacs-lisp")))
          (add-to-list 'org-structure-template-alist template)))

  (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :custom (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun cstm/org-mode-visual-fill ()
      (setq visual-fill-column-width cstm/org-column-width
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

  (use-package visual-fill-column
      :hook (org-mode . cstm/org-mode-visual-fill))

  (with-eval-after-load 'org
      (org-babel-do-load-languages
       'org-babel-load-languages
          '((emacs-lisp . t)
          (shell . t))))
#+end_src
** Auto-tangle Configuration files
#+begin_src emacs-lisp
  (defun cstm/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name)) (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil)) (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cstm/org-babel-tangle-config)))
#+end_src
* IDE
** Origami (fold blocks)
#+begin_src emacs-lisp
  (use-package origami) ;; TODO: bindings
#+end_src
** Company (code completion)
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind 
    (:map company-active-map ("<tab>" . company-complete-selection))
    :custom
    (company-tooltip-align-annotations t)
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box :hook (company-mode . company-box-mode))
#+end_src
** Magit (git integration)
#+begin_src emacs-lisp
  (use-package magit :commands magit-status)
#+end_src
** Linting
*** Flycheck
#+begin_src emacs-lisp
  (use-package exec-path-from-shell :config (exec-path-from-shell-initialize))
  (use-package flycheck :config (global-flycheck-mode))
#+end_src
*** ESLint
Disable default *JSLint*
#+begin_src emacs-lisp
  (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint json-jsonlist)))
#+end_src
Enable live *ESLint* errors when in /web mode/
#+begin_src emacs-lisp
  (flycheck-add-mode 'javascript-eslint 'web-mode)
#+end_src
To use config from local node_modules
#+begin_src emacs-lisp
  (use-package add-node-modules-path :config (add-hook 'flycheck-mode-hook 'add-node-modules-path))
#+end_src
** Formatting
*** Prettier
#+begin_src emacs-lisp
  (use-package prettier-js
    :custom
    (prettier-js-args '(
                        "--bracket-same-line" "false"
                        "--allow-parens" "avoid"
                        "--bracket-spacing" "false"
                        "--use-tabs" "true"
                        "--semi" "true"
                        "--single-quote" "false"
                        "--jsx-single-quote" "false"
                        "--trailing-comma" "es5"
                        "--tab-width" "1"
                        "--print-width" "180"
                        ))
    :config
    (add-hook 'web-mode-hook #'(lambda ()
                                 (enable-minor-mode '("\\.jsx?\\'" . prettier-js-mode)))))
#+end_src
** Vterm (terminal)
#+begin_src emacs-lisp
  (use-package vterm
      :commands vterm
      :config 
      (setq vterm-shell "zsh")
      (setq vterm-max-scrollback 5000))
#+end_src
** Rainbow parantheses
#+begin_src emacs-lisp
  (use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook term-mode-hook eshell-mode-hook shell-mode-hook git-commit-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package cl-lib)
  (use-package projectile
    :diminish projectile-mode
    :config 
    (projectile-mode)
    (setq projectile-enable-caching t)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Documents/") 
      (setq paths '())
      (dolist (dir cstm/project-dirs)
        (setq paths (append paths (cddr (cl-remove-if (lambda (el) (or (not (file-directory-p el)) (member el '("." ".." ".DS_STORE")))) (directory-files dir))))))
      (setq projectile-project-search-path paths)
    (setq projectile-switch-project-action #'projectile-dired)))

  (use-package counsel-projectile 
    :after projectile
    :config (counsel-projectile-mode))
#+end_src
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c l")
    :custom
    (lsp-enable-file-watchers nil)
    (lsp-enable-links nil)
    (lsp-idle-delay 0.1)
    (lsp-log-io nil)
    (lsp-completion-provider :none)
    (lsp-enable-which-key-integration t)
    (lsp-origami-mode t)
    (lsp-headerline-breadcrumb-enable nil))

  (use-package lsp-origami :after lsp)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom (lsp-ui-doc-position 'bottom))

  (use-package lsp-ivy :after lsp)
#+end_src
** Language Support
*** JSX
**** Web mode
#+begin_src emacs-lisp
  (use-package web-mode :mode "\\.[tj]sx?$")
#+end_src
**** Emmet
#+begin_src emacs-lisp
  (use-package emmet-mode 
    :hook
    (web-mode . emmet-mode)
    (web-mode . (lambda () (setq-local emmet-expand-jsx-className? t))))
#+end_src
**** RJSX Mode
#+begin_src emacs-lisp
  (use-package rjsx-mode :hook (web-mode . rjsx-mode))
#+end_src
*** JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :mode "\\.json\\'"
    :interpreter "json")
#+end_src
*** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.tsx?\\'"
    :hook (typescript-mode . lsp-deferred))
#+end_src
*** C/C++
#+begin_src emacs-lisp
  (setq c-basic-offset 4)
#+end_src
* Help
** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
** Which-key (keybinds suggestions)
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config (setq which-key-idle-delay 0.3))
#+end_src
* OnEnd
#+begin_src emacs-lisp
  ;; Decrease memory to 2MB
  (setq gc-cons-threshold (* 2 1024 1024))
#+end_src
